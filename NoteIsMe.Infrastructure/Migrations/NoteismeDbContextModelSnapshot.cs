// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NoteIsMe.Infrastructure;

namespace NoteIsMe.Infrastructure.Migrations
{
    [DbContext(typeof(NoteismeDbContext))]
    partial class NoteismeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("NoteIsMe.Domain.Models.Folder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IconURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Folders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IconURL = "/Assets/folderIcons/home.png",
                            Name = "Folder",
                            OwnerId = 1
                        },
                        new
                        {
                            Id = 2,
                            IconURL = "/Assets/folderIcons/school.png",
                            Name = "School Item",
                            OwnerId = 2
                        },
                        new
                        {
                            Id = 3,
                            IconURL = "/Assets/folderIcons/misc.png",
                            Name = "My Misc",
                            OwnerId = 2
                        },
                        new
                        {
                            Id = 4,
                            IconURL = "/Assets/folderIcons/work.png",
                            Name = "Only One",
                            OwnerId = 3
                        });
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.FolderNotebook", b =>
                {
                    b.Property<int>("FolderId")
                        .HasColumnType("int");

                    b.Property<int>("NoteBookId")
                        .HasColumnType("int");

                    b.HasKey("FolderId", "NoteBookId");

                    b.HasIndex("NoteBookId");

                    b.ToTable("FolderNotebooks");

                    b.HasData(
                        new
                        {
                            FolderId = 1,
                            NoteBookId = 1
                        },
                        new
                        {
                            FolderId = 2,
                            NoteBookId = 2
                        },
                        new
                        {
                            FolderId = 3,
                            NoteBookId = 4
                        });
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.Group", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("NotebookId")
                        .HasColumnType("int");

                    b.Property<bool>("EditPermission")
                        .HasColumnType("bit");

                    b.Property<bool>("SharePermission")
                        .HasColumnType("bit");

                    b.Property<bool>("ViewPermission")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "NotebookId");

                    b.HasIndex("NotebookId");

                    b.ToTable("Groups");

                    b.HasData(
                        new
                        {
                            UserId = 3,
                            NotebookId = 2,
                            EditPermission = true,
                            SharePermission = true,
                            ViewPermission = true
                        },
                        new
                        {
                            UserId = 1,
                            NotebookId = 4,
                            EditPermission = false,
                            SharePermission = true,
                            ViewPermission = true
                        },
                        new
                        {
                            UserId = 2,
                            NotebookId = 4,
                            EditPermission = true,
                            SharePermission = false,
                            ViewPermission = true
                        });
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<int>("NotebookId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NotebookId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.NoteTag", b =>
                {
                    b.Property<int>("NoteId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("NoteId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("NoteTags");
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.Notebook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Notebooks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OwnerId = 1,
                            Title = "Only Mine"
                        },
                        new
                        {
                            Id = 2,
                            OwnerId = 2,
                            Title = "Shared NB"
                        },
                        new
                        {
                            Id = 3,
                            OwnerId = 2,
                            Title = "Stuff"
                        },
                        new
                        {
                            Id = 4,
                            OwnerId = 3,
                            Title = "Everyone's NB"
                        });
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.Sketch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Content")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime2");

                    b.Property<int>("LastModifierUserId")
                        .HasColumnType("int");

                    b.Property<int>("NotebookId")
                        .HasColumnType("int");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NotebookId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Sketches");
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.SketchTag", b =>
                {
                    b.Property<int>("SketchId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("SketchId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("SketchTags");
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tags");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = "#8c34eb",
                            Name = "App Dev",
                            UserId = 1
                        });
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasFilter("[Email] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@admin.com",
                            Name = "admin",
                            Password = "1zbbwGguKx3wT7UHPOTHjS1mCEaj5xriQAEqKQQQlVw=",
                            Role = 3,
                            Salt = "/zzRmyEbyhaZfi+SCExAeweJFih4D8aZ/uL8XYy03dE="
                        },
                        new
                        {
                            Id = 2,
                            Email = "user1@example.com",
                            Name = "User One",
                            Password = "NeP5cLGOuXtXI4YL0zbY27Nrawu8/SRS4RDs4LRshZ4=",
                            Role = 1,
                            Salt = "F9wZzYqCFH/RiIPMqT4x/SDXkb7plRkwT6LM74xJ3FE="
                        },
                        new
                        {
                            Id = 3,
                            Email = "user2@example.com",
                            Name = "User Two",
                            Password = "yttEU+VeADGQ3zv4911feTo1EyA2B9dfl8WH8ppbv1I=",
                            Role = 1,
                            Salt = "RoFZqkf6zcV2WFs/3sfXze58KmDY1vumxRYOht5w/nQ="
                        });
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.Folder", b =>
                {
                    b.HasOne("NoteIsMe.Domain.Models.User", "Owner")
                        .WithMany("Folders")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.FolderNotebook", b =>
                {
                    b.HasOne("NoteIsMe.Domain.Models.Folder", "Folder")
                        .WithMany("FolderNotebooks")
                        .HasForeignKey("FolderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteIsMe.Domain.Models.Notebook", "NoteBook")
                        .WithMany("FolderNotebooks")
                        .HasForeignKey("NoteBookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.Group", b =>
                {
                    b.HasOne("NoteIsMe.Domain.Models.Notebook", "Notebook")
                        .WithMany("Groups")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteIsMe.Domain.Models.User", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.Note", b =>
                {
                    b.HasOne("NoteIsMe.Domain.Models.Notebook", "Notebook")
                        .WithMany("Notes")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NoteIsMe.Domain.Models.User", "Owner")
                        .WithMany("Notes")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.NoteTag", b =>
                {
                    b.HasOne("NoteIsMe.Domain.Models.Note", "Note")
                        .WithMany("NoteTags")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteIsMe.Domain.Models.Tag", "Tag")
                        .WithMany("NoteTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.Notebook", b =>
                {
                    b.HasOne("NoteIsMe.Domain.Models.User", "Owner")
                        .WithMany("Notebooks")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.Sketch", b =>
                {
                    b.HasOne("NoteIsMe.Domain.Models.Notebook", "Notebook")
                        .WithMany("Sketches")
                        .HasForeignKey("NotebookId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("NoteIsMe.Domain.Models.User", "Owner")
                        .WithMany("Sketches")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.SketchTag", b =>
                {
                    b.HasOne("NoteIsMe.Domain.Models.Sketch", "Sketch")
                        .WithMany("SketchTags")
                        .HasForeignKey("SketchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NoteIsMe.Domain.Models.Tag", "Tag")
                        .WithMany("SketchTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NoteIsMe.Domain.Models.Tag", b =>
                {
                    b.HasOne("NoteIsMe.Domain.Models.User", "User")
                        .WithMany("Tags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
